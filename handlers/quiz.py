from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.user_states import UserStates
from data.quiz_data import QUIZ_MODULES
from data.messages import QUIZ_SELECTION_MESSAGE
from utils.database import Database
import random

class QuizHandler:
    def __init__(self, database: Database):
        self.database = database
    
    async def show_quiz_selection(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è –¥–ª—è –∫–≤–∏–∑–∞"""
        await state.set_state(UserStates.QUIZ_SELECTION)
        
        keyboard_buttons = []
        for module_id, module_data in QUIZ_MODULES.items():
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìö {module_data['title']}", 
                    callback_data=f"quiz_module_{module_id}"
                )
            ])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(QUIZ_SELECTION_MESSAGE, reply_markup=keyboard)
    
    async def start_quiz(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∫–≤–∏–∑–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é"""
        module_id = callback.data.replace("quiz_module_", "")
        
        if module_id not in QUIZ_MODULES:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        module_data = QUIZ_MODULES[module_id]
        questions = module_data['questions']
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        shuffled_questions = questions.copy()
        random.shuffle(shuffled_questions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            quiz_module=module_id,
            questions=shuffled_questions,
            current_question=0,
            correct_answers=0,
            total_questions=len(shuffled_questions)
        )
        
        await state.set_state(UserStates.QUIZ_IN_PROGRESS)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await self.show_question(callback.message, state)
        await callback.answer()
    
    async def show_question(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        data = await state.get_data()
        current_question = data['current_question']
        questions = data['questions']
        
        if current_question >= len(questions):
            await self.finish_quiz(message, state)
            return
        
        question_data = questions[current_question]
        
        keyboard_buttons = []
        for i, option in enumerate(question_data['options']):
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{chr(97 + i)}) {option}", 
                    callback_data=f"quiz_answer_{i}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        question_text = f"üìö **–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(questions)}**\n\n{question_data['question']}"
        
        await message.answer(question_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def handle_answer(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        data = await state.get_data()
        current_question = data['current_question']
        questions = data['questions']
        correct_answers = data['correct_answers']
        
        if current_question >= len(questions):
            await callback.answer("–ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return
        
        question_data = questions[current_question]
        user_answer = int(callback.data.replace("quiz_answer_", ""))
        correct_answer = question_data['correct']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = user_answer == correct_answer
        if is_correct:
            correct_answers += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_question=current_question + 1,
            correct_answers=correct_answers
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n{question_data['explanation']}" if is_correct else f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_answer]}\n\n{question_data['explanation']}"
        
        await callback.message.edit_text(result_text, parse_mode="Markdown")
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
        if current_question + 1 < len(questions):
            await self.show_question(callback.message, state)
        else:
            await self.finish_quiz(callback.message, state)
    
    async def finish_quiz(self, message: types.Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞"""
        data = await state.get_data()
        correct_answers = data['correct_answers']
        total_questions = data['total_questions']
        module_id = data['quiz_module']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await self.database.save_test_result(
            user_id=message.chat.id,
            test_type=f"quiz_{module_id}",
            score=correct_answers,
            total_questions=total_questions
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        percentage = (correct_answers / total_questions) * 100
        
        if percentage >= 80:
            result_emoji = "üéâ"
            result_text = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        elif percentage >= 60:
            result_emoji = "üëç"
            result_text = "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        else:
            result_emoji = "üìö"
            result_text = "–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
        
        result_message = f"""
{result_emoji} **–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**

**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {correct_answers} –∏–∑ {total_questions} ({percentage:.1f}%)
**–û—Ü–µ–Ω–∫–∞:** {result_text}

–ú–æ–¥—É–ª—å: {QUIZ_MODULES[module_id]['title']}
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data=f"quiz_module_{module_id}"),
                InlineKeyboardButton(text="üìö –î—Ä—É–≥–æ–π –º–æ–¥—É–ª—å", callback_data="quiz")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            ]
        ])
        
        await message.answer(result_message, reply_markup=keyboard, parse_mode="Markdown")
        await state.clear() 