from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.user_states import UserStates
from data.quiz_data import BRAIN_GAMES, BRAIN_GAME_TASKS
from data.messages import BRAIN_GAMES_INTRO
from utils.database import Database
import random
import time

class BrainGamesHandler:
    def __init__(self, database: Database):
        self.database = database
    
    async def show_brain_games_menu(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∏–≥—Ä –¥–ª—è –º–æ–∑–≥–∞"""
        await state.set_state(UserStates.BRAIN_GAMES_SELECTION)
        
        keyboard_buttons = []
        for game_id, game_data in BRAIN_GAMES.items():
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üß† {game_data['title']}", 
                    callback_data=f"brain_game_{game_id}"
                )
            ])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(BRAIN_GAMES_INTRO, reply_markup=keyboard)
    
    async def start_brain_game(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –¥–ª—è –º–æ–∑–≥–∞"""
        game_id = callback.data.replace("brain_game_", "")
        
        if game_id not in BRAIN_GAMES:
            await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        game_data = BRAIN_GAMES[game_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            game_id=game_id,
            game_data=game_data,
            current_round=0,
            score=0,
            total_rounds=5
        )
        
        await state.set_state(UserStates.BRAIN_GAME_IN_PROGRESS)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        await self.show_game_round(callback.message, state)
        await callback.answer()
    
    async def show_game_round(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã"""
        data = await state.get_data()
        current_round = data['current_round']
        total_rounds = data['total_rounds']
        game_data = data['game_data']
        
        if current_round >= total_rounds:
            await self.finish_game(message, state)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        task = self.generate_task(game_data['type'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
        await state.update_data(
            current_round=current_round + 1,
            current_task=task
        )
        
        keyboard_buttons = []
        for i, option in enumerate(task['options']):
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=str(option), 
                    callback_data=f"brain_answer_{i}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        round_text = f"üß† **–†–∞—É–Ω–¥ {current_round + 1} –∏–∑ {total_rounds}**\n\n{task['question']}"
        
        await message.answer(round_text, reply_markup=keyboard, parse_mode="Markdown")
    
    def generate_task(self, game_type: str) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–≥—Ä—ã"""
        if game_type == "sequence":
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª
            sequence = []
            pattern = random.choice(['arithmetic', 'geometric', 'fibonacci'])
            
            if pattern == 'arithmetic':
                start = random.randint(1, 10)
                step = random.randint(2, 5)
                sequence = [start + i * step for i in range(4)]
                next_num = sequence[-1] + step
            elif pattern == 'geometric':
                start = random.randint(1, 5)
                ratio = random.randint(2, 3)
                sequence = [start * (ratio ** i) for i in range(4)]
                next_num = sequence[-1] * ratio
            else:  # fibonacci
                sequence = [1, 1, 2, 3]
                next_num = 5
            
            options = [next_num, next_num + random.randint(1, 5), next_num - random.randint(1, 3), next_num * 2]
            random.shuffle(options)
            
            return {
                'question': f"–ù–∞–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n{sequence[0]}, {sequence[1]}, {sequence[2]}, {sequence[3]}, ?",
                'options': options,
                'correct': options.index(next_num)
            }
        
        elif game_type == "logic":
            # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ quiz_data
            if game_type in BRAIN_GAME_TASKS:
                return random.choice(BRAIN_GAME_TASKS[game_type])
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                tasks = [
                    {
                        'question': "–ï—Å–ª–∏ –≤—Å–µ —Ä–æ–∑—ã - —Ü–≤–µ—Ç—ã, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ü–≤–µ—Ç—ã –±—ã—Å—Ç—Ä–æ —É–≤—è–¥–∞—é—Ç, —Ç–æ:",
                        'options': [
                            "–í—Å–µ —Ä–æ–∑—ã –±—ã—Å—Ç—Ä–æ —É–≤—è–¥–∞—é—Ç",
                            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–∑—ã –±—ã—Å—Ç—Ä–æ —É–≤—è–¥–∞—é—Ç", 
                            "–ù–∏ –æ–¥–Ω–∞ —Ä–æ–∑–∞ –Ω–µ —É–≤—è–¥–∞–µ—Ç",
                            "–ù–µ–ª—å–∑—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                        ],
                        'correct': 1
                    }
                ]
                return random.choice(tasks)
        
        elif game_type == "pattern":
            # –ü–æ–∏—Å–∫ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏–∑ quiz_data
            if game_type in BRAIN_GAME_TASKS:
                return random.choice(BRAIN_GAME_TASKS[game_type])
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                patterns = [
                    {
                        'question': "–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π?\nüî¥ ‚ö´ üî¥ ‚ö´ üî¥ ?",
                        'options': ["üî¥", "‚ö´", "üîµ", "üü°"],
                        'correct': 1
                    }
                ]
                return random.choice(patterns)
        
        else:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            return {
                'question': "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                'options': ["–í–∞—Ä–∏–∞–Ω—Ç A", "–í–∞—Ä–∏–∞–Ω—Ç B", "–í–∞—Ä–∏–∞–Ω—Ç C", "–í–∞—Ä–∏–∞–Ω—Ç D"],
                'correct': 0
            }
    
    async def handle_game_answer(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä–µ"""
        data = await state.get_data()
        current_round = data['current_round']
        total_rounds = data['total_rounds']
        score = data['score']
        current_task = data['current_task']
        
        if current_round > total_rounds:
            await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return
        
        user_answer = int(callback.data.replace("brain_answer_", ""))
        correct_answer = current_task['correct']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = user_answer == correct_answer
        if is_correct:
            score += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(score=score)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n{current_task['options'][correct_answer]}" if is_correct else f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_task['options'][correct_answer]}"
        
        await callback.message.edit_text(result_text, parse_mode="Markdown")
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if current_round < total_rounds:
            await self.show_game_round(callback.message, state)
        else:
            await self.finish_game(callback.message, state)
    
    async def finish_game(self, message: types.Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        data = await state.get_data()
        score = data['score']
        total_rounds = data['total_rounds']
        game_id = data['game_id']
        game_data = data['game_data']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await self.database.save_test_result(
            user_id=message.chat.id,
            test_type=f"brain_game_{game_id}",
            score=score,
            total_questions=total_rounds
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        percentage = (score / total_rounds) * 100
        
        if percentage >= 80:
            result_emoji = "üß†"
            result_text = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –º–æ–∑–≥–∞!"
        elif percentage >= 60:
            result_emoji = "üí°"
            result_text = "–•–æ—Ä–æ—à–∞—è –ª–æ–≥–∏–∫–∞!"
        else:
            result_emoji = "ü§î"
            result_text = "–ù—É–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –º—ã—à–ª–µ–Ω–∏–µ!"
        
        result_message = f"""
{result_emoji} **–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

**–ò–≥—Ä–∞:** {game_data['title']}
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {score} –∏–∑ {total_rounds} ({percentage:.1f}%)
**–û—Ü–µ–Ω–∫–∞:** {result_text}
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"brain_game_{game_id}"),
                InlineKeyboardButton(text="üß† –î—Ä—É–≥–∞—è –∏–≥—Ä–∞", callback_data="brain_games")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            ]
        ])
        
        await message.answer(result_message, reply_markup=keyboard, parse_mode="Markdown")
        await state.clear() 