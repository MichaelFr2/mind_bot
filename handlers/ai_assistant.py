from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.user_states import UserStates
from data.messages import AI_WELCOME_MESSAGE, AI_THINKING_MESSAGE, AI_ERROR_MESSAGE
from ai.api_client import AIClient
from ai.context_manager import ContextManager
from utils.database import Database

class AIAssistantHandler:
    def __init__(self, database: Database):
        self.database = database
        self.context_manager = ContextManager()
        
    async def start_ai_chat(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å –ò–ò"""
        await state.set_state(UserStates.AI_CHAT)
        await message.answer(AI_WELCOME_MESSAGE)
        
    async def handle_ai_question(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
        question = message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer(AI_THINKING_MESSAGE)
        
        try:
            async with AIClient() as ai_client:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = self.context_manager.get_context_for_question(question)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
                answer = await ai_client.get_answer(question, context)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                suggestions = await ai_client.get_suggestions(question, context)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await loading_msg.delete()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                await self.database.save_ai_interaction(
                    user_id=message.from_user.id,
                    question=question,
                    answer=answer
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="ai_like"),
                        InlineKeyboardButton(text="üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ", callback_data="ai_dislike")
                    ],
                    [
                        InlineKeyboardButton(text="üîÑ –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ai_another")
                    ]
                ])
                
                response = f"ü§ñ **–û—Ç–≤–µ—Ç:**\n\n{answer}\n\n"
                
                if suggestions:
                    response += "üí° **–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã:**\n"
                    for i, suggestion in enumerate(suggestions[:3], 1):
                        response += f"{i}. {suggestion}\n"
                
                response += "\n–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç:"
                
                await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(last_question=question, last_answer=answer)
                await state.set_state(UserStates.AI_FEEDBACK)
                
        except Exception as e:
            await loading_msg.delete()
            await message.answer(AI_ERROR_MESSAGE)
            await state.set_state(UserStates.AI_CHAT)
    
    async def handle_ai_feedback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –æ—Ç–≤–µ—Ç—É –ò–ò"""
        feedback_type = callback.data
        
        if feedback_type == "ai_like":
            feedback_value = 1
            await callback.answer("üëç –°–ø–∞—Å–∏–±–æ! –†–∞–¥, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω!")
        elif feedback_type == "ai_dislike":
            feedback_value = 0
            await callback.answer("üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ª—É—á—à–µ.")
        elif feedback_type == "ai_another":
            await callback.answer("üîÑ –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")
            await state.set_state(UserStates.AI_CHAT)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        data = await state.get_data()
        if 'last_question' in data and 'last_answer' in data:
            await self.database.save_ai_interaction(
                user_id=callback.from_user.id,
                question=data['last_question'],
                answer=data['last_answer'],
                feedback=feedback_value
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await state.set_state(UserStates.AI_CHAT) 