from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
from typing import List, Dict, Any
from utils.database import Database
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class Scheduler:
    def __init__(self, bot, database: Database):
        self.bot = bot
        self.database = database
        self.scheduler = AsyncIOScheduler()
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        self._setup_reminders()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
    
    def _setup_reminders(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00
        self.scheduler.add_job(
            self._send_daily_reminders,
            CronTrigger(hour=10, minute=0),
            id='daily_reminders',
            replace_existing=True
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 18:00
        self.scheduler.add_job(
            self._send_weekly_reminders,
            CronTrigger(day_of_week='mon,thu', hour=18, minute=0),
            id='weekly_reminders',
            replace_existing=True
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –≤ 12:00
        self.scheduler.add_job(
            self._send_weekend_reminders,
            CronTrigger(day_of_week='sat,sun', hour=12, minute=0),
            id='weekend_reminders',
            replace_existing=True
        )
    
    async def _send_daily_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        users = await self.database.get_users_with_reminders()
        
        for user in users:
            if user['reminder_frequency'] in ['daily', 'once_a_day']:
                await self._send_reminder_message(user['user_id'])
    
    async def _send_weekly_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º"""
        users = await self.database.get_users_with_reminders()
        
        for user in users:
            if user['reminder_frequency'] in ['mon_thu', 'twice_a_week']:
                await self._send_reminder_message(user['user_id'])
    
    async def _send_weekend_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º"""
        users = await self.database.get_users_with_reminders()
        
        for user in users:
            if user['reminder_frequency'] in ['weekends', 'weekend_only']:
                await self._send_reminder_message(user['user_id'])
    
    async def _send_reminder_message(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        reminder_messages = [
            "üß† –ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º?",
            "üí™ –í—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∑–≥–∞! –ö–∞–∫–æ–π —Ç–µ—Å—Ç –≤—ã–±–µ—Ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
            "üöÄ –¢–≤–æ–π –º–æ–∑–≥ –∂–¥—ë—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á! –ó–∞–≥–ª—è–Ω–∏ –≤ –ø–æ–º–æ—â–Ω–∏–∫ –∫—É—Ä—Å–∞!",
            "üéØ –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –±–æ–ª—å—à–æ–º—É –º—ã—à–ª–µ–Ω–∏—é! –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è!",
            "üåü –†–∞–∑–≤–∏—Ç–∏–µ –º—ã—à–ª–µ–Ω–∏—è - —ç—Ç–æ –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–∂–µ–Ω–∏–µ!"
        ]
        
        import random
        message = random.choice(reminder_messages)
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                reply_markup=self._get_reminder_keyboard()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def _get_reminder_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö –¢–µ—Å—Ç-–∫–≤–∏–∑", callback_data="quiz"),
                InlineKeyboardButton(text="üëÅ –¢–µ—Å—Ç –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ", callback_data="attention")
            ],
            [
                InlineKeyboardButton(text="‚ö° –¢–µ—Å—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data="speed"),
                InlineKeyboardButton(text="üß† –†–∞–∑–º–∏–Ω–∫–∞ –º–æ–∑–≥–∞", callback_data="brain_games")
            ],
            [
                InlineKeyboardButton(text="ü§ñ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_assistant")
            ]
        ])
        return keyboard 